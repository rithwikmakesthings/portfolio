import { motion, type SVGMotionProps, useAnimation, type Variants } from "framer-motion";
import { rgba } from "polished";
import React, { useCallback, useEffect } from "react";

import useMotionValues from "./utils/useMotionValues";

const letterVariants: Variants = {
  hidden: ({ color }) => ({
    pathLength: 0,
    fill: rgba(color, 0),
    transition: {
      ease: "linear",
      duration: 0.5
    }
  }),
  outline: ({ color }) => ({
    opacity: 1,
    pathLength: 1,
    fill: rgba(color, 0),
    transition: {
      ease: "linear",
      duration: 0.5
    }
  }),
  filled: ({ index, color }) => ({
    fill: index >= 4 ? rgba(color, 0) : rgba(color, 1),
    transition: {
      ease: "linear",
      duration: 0.75
    }
  })
};

const globalVariants: Variants = {
  outline: {
    transition: {
      staggerChildren: 0.09,
      delayChildren: 0.04
    }
  },
  hidden: {
    transition: {
      staggerChildren: 0.06,
      staggerDirection: -1
    }
  },
  filled: {
    transition: {
      staggerChildren: 0.05,
      delayChildren: 0.01,
      staggerDirection: -1
    }
  }
};

const letterPaths = [
  {
    letter: "t",
    d:
      "M 27.8078125 57 27.8078125 9.50390625 45.1164062 9.50390625 45.1164062 1 0.43671875 1 0.43671875 9.50390625 17.7453125 9.50390625 17.7453125 57z"
  },
  {
    letter: "i",
    d: "M 62.9632812 57 62.9632812 15 53.0648437 15 53.0648437 57z"
  },
  {
    letter: "i", //dot
    d: "M 62.9632812 9.6 62.9632812 1 53.0648437 1 53.0648437 9.6z"
  },
  {
    letter: "m",
    d:
      "M82.8335937,57 L82.8335937,31.4609375 C82.8335937,29.7291667 83.1799479,28.2115885 83.8726562,26.9082031 C84.5653646,25.6048177 85.4950521,24.593099 86.6617187,23.8730469 C87.8283854,23.1529948 89.1226562,22.7929688 90.5445312,22.7929688 C92.6408854,22.7929688 94.3407552,23.4401042 95.6441406,24.734375 C96.947526,26.0286458 97.5992187,27.7604167 97.5992187,29.9296875 L97.5992187,29.9296875 L97.5992187,57 L107.30625,57 L107.30625,30.8046875 C107.30625,28.4348958 107.976172,26.5071615 109.316016,25.0214844 C110.655859,23.5358073 112.519792,22.7929688 114.907812,22.7929688 C116.913021,22.7929688 118.608333,23.3990885 119.99375,24.6113281 C121.379167,25.8235677 122.071875,27.7330729 122.071875,30.3398438 L122.071875,30.3398438 L122.071875,57 L131.997656,57 L131.997656,28.8085938 C131.997656,24.1236979 130.776302,20.5598958 128.333594,18.1171875 C125.890885,15.6744792 122.73724,14.453125 118.872656,14.453125 C115.828385,14.453125 113.198828,15.1503906 110.983984,16.5449219 C108.769141,17.9394531 107.196875,19.8033854 106.267187,22.1367188 L106.267187,22.1367188 L105.829687,22.1367188 C105.027604,19.7669271 103.646745,17.8938802 101.687109,16.5175781 C99.727474,15.141276 97.3257812,14.453125 94.4820312,14.453125 C91.6747396,14.453125 89.259375,15.1321615 87.2359375,16.4902344 C85.2125,17.8483073 83.7632812,19.7304688 82.8882812,22.1367188 L82.8882812,22.1367188 L82.3960937,22.1367188 L82.3960937,15 L72.9351562,15 L72.9351562,57 L82.8335937,57 Z"
  },
  {
    letter: "w",
    d:
      "M223.10521,0.5 L235.06377,0.5 L218.976856,57.5 L208.21333,57.5 L197.369937,19.49523 L186.07694,57.5 L175.317676,57.5 L159.230761,0.5 L171.19378,0.5 L181.095,40.883 L191.798422,0.5 L202.495926,0.5 L212.905987,40.1900015 L223.10521,0.5 Z"
  },
  {
    letter: "e",
    d:
      "M278.352344,0.5 L278.352344,10.0039062 L252.075,10.0039062 L252.075,24.2070313 L276.465625,24.2070312 L276.465625,33.7109375 L252.075,33.7109375 L252.075,47.9960938 L278.571094,47.9960938 L278.571094,57.5 L240.930469,57.5 L240.930469,0.5 L278.352344,0.5 Z"
  },
  {
    letter: "i",
    d:
      "M298.860156,0.5 L298.860156,57.5 L287.715625,57.5 L287.715625,0.5 L298.860156,0.5 Z"
  },
  {
    letter: "s",
    d:
      "M329.395312,-0.265625 C333.449221,-0.265625 337.004366,0.440657513 340.062862,1.84440477 C343.147823,3.26029855 345.569013,5.22273385 347.331479,7.7258114 C349.193684,10.3705384 350.110894,13.4260706 350.076794,16.8945312 L350.076794,16.8945312 L339.369949,16.8945312 C339.09928,14.2629674 338.102552,12.4877568 336.312204,11.2249996 C334.499544,9.94650533 332.145176,9.3203125 329.258594,9.3203125 C327.220289,9.3203125 325.470465,9.62281556 324.011464,10.2380569 C322.592044,10.8366074 321.500914,11.6436185 320.747734,12.6706818 C320.007574,13.6799905 319.630837,14.8326899 319.614062,16.1210938 C319.614062,17.1843749 319.85353,18.1087034 320.344195,18.8904411 C320.843855,19.6865088 321.52705,20.3581287 322.39058,20.9084177 C323.289673,21.4813691 324.285949,21.961269 325.378924,22.3490986 C326.492139,22.7441106 327.614326,23.0763016 328.750955,23.34696 L328.750955,23.34696 L333.998262,24.6587947 L334.792832,24.85279 C336.651261,25.3277556 338.449547,25.9371669 340.187717,26.680942 C342.192061,27.5386147 343.990989,28.6205011 345.585101,29.9256222 C347.198168,31.2462614 348.476427,32.8404138 349.419746,34.7081855 C350.36359,36.5769978 350.840625,38.7658273 350.840625,41.2773438 C350.840625,44.6654333 349.970855,47.6424616 348.239618,50.2110901 C346.512808,52.773151 344.024608,54.7769908 340.766957,56.2133612 C337.548577,57.6324166 333.658679,58.3476563 329.094531,58.3476562 C324.662393,58.3476562 320.820337,57.6570169 317.566284,56.2849375 C314.273144,54.8963771 311.70538,52.8668646 309.857524,50.2029497 C307.928507,47.4220319 306.917929,44.0086301 306.841586,39.9570313 L306.841586,39.9570313 L317.793838,39.9570313 C317.967614,42.2306929 318.524111,43.7782304 319.528628,45.0078969 C320.531551,46.2356135 321.843036,47.149381 323.459272,47.7543888 C325.111545,48.3728868 326.962939,48.6796875 329.0125,48.6796875 C331.14737,48.6796875 333.023,48.3613782 334.637789,47.7172275 C336.216108,47.0876251 337.457723,46.2122639 338.355277,45.081691 C339.233077,43.9759998 339.678035,42.679924 339.696054,41.1954948 C339.678398,39.872464 339.297404,38.7720539 338.534871,37.9017714 C337.739515,36.9940275 336.625089,36.2386771 335.199634,35.6252997 C333.717005,34.9873199 331.987052,34.417421 330.008906,33.913891 L330.008906,33.913891 L323.634656,32.2724422 L323.082413,32.1263718 C318.641692,30.917733 315.117949,29.1243014 312.503281,26.7594997 C309.729964,24.251209 308.332812,20.9180163 308.332812,16.75 C308.332812,13.3379975 309.264897,10.3517942 311.121225,7.78874267 C312.966568,5.24085832 315.47953,3.25660117 318.665024,1.84186694 C321.823724,0.43903272 325.399994,-0.265625 329.395312,-0.265625 Z"
  },
  {
    letter: "e",
    d:
      "M396.285937,0.5 L396.285937,10.0039062 L370.008594,10.0039062 L370.008594,24.2070312 L394.399219,24.2070312 L394.399219,33.7109375 L370.008594,33.7109375 L370.008594,47.9960938 L396.504687,47.9960938 L396.504687,57.5 L358.864062,57.5 L358.864062,0.5 L396.285937,0.5 Z"
  }
];

interface AnimatedLogoProps
  extends Omit<SVGMotionProps<SVGSVGElement>, "viewBox" | "animate"> {
  isShown?: boolean;
  color?: string;
}

export default function AnimatedLogo({
  isShown,

  color = "rgb(255,255,255)",
  ...props
}: AnimatedLogoProps) {
  const pathLengths = useMotionValues(letterPaths.length, (_) => 0);
  const controls = useAnimation();

  const runStartAnimationSequence = useCallback(() => {
    controls.start("outline");
    setTimeout(() => controls.start("filled"), 400);
  }, [controls]);

  const runExitAnimationSequence = useCallback(async () => {
    await controls.start("hidden");
  }, [controls]);

  useEffect(() => {
    if (isShown) {
      runStartAnimationSequence();
    } else {
      runExitAnimationSequence();
    }
  }, [isShown, runStartAnimationSequence, runExitAnimationSequence]);

  useEffect(() => {
    // if uncontrolled, run animation once
    if (isShown === undefined) {
      runStartAnimationSequence();
    }
  }, [isShown, runStartAnimationSequence]);

  return (
    <motion.svg
      xmlns="http://www.w3.org/2000/svg"
      width="398"
      height="62"
      viewBox="0 -1 398 62"
      initial={false}
      animate={controls}
      {...props}
    >
      <motion.g
        fillRule="nonzero"
        stroke={color}
        strokeWidth="1"
        variants={globalVariants}
      >
        {letterPaths.map(({ d }, index) => (
          <motion.path
            key={index}
            d={d}
            custom={{ index, color }}
            id={`letter-${index}`}
            variants={letterVariants}
            style={{ pathLength: pathLengths[index] }}
          />
        ))}
      </motion.g>
    </motion.svg>
  );
}
